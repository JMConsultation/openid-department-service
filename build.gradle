/*
 * This file was generated by the Gradle 'init' task.
 */
import java.time.LocalDateTime
import com.amazonaws.auth.*
import com.amazonaws.auth.profile.*

buildscript {
    dependencies {
        classpath "com.netflix.nebula:nebula-release-plugin:6.3.3"
        classpath "com.netflix.nebula:nebula-publishing-plugin:7.1.0"
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven-publish'
    id("org.springframework.boot") version "2.3.0.RELEASE"
    id("com.github.johnrengelman.processes") version "0.5.0"
    id("org.springdoc.openapi-gradle-plugin") version "1.3.0"
}

apply plugin: "nebula.release"
apply plugin: "nebula.maven-publish"
apply plugin: "nebula.javadoc-jar"
apply plugin: "nebula.source-jar"

ext {
    awsCredentials = new ProfileCredentialsProvider().credentials
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "s3://${repoBucketName}/releases"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation("org.springdoc:springdoc-openapi-ui:1.2.33")

    implementation 'org.keycloak:keycloak-spring-boot-starter:9.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation("org.springdoc:springdoc-openapi-ui")
}

group = 'org.ss.department'
//version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

bootJar {
    archiveFileName = 'application.jar'
    exclude("**/generated-gradle-jars/*")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task copyJar(type: Copy) {
    from 'Dockerfile'
    into 'build'
}

task dockerBuild(type: Exec) {
    workingDir 'build'
    executable "docker"
    args "build", ".", "-t", "${docker_registry}:${version}"
}

task dockerPush(type: Exec) {
    workingDir 'build'
    executable "docker"
    args "push", "${docker_registry}:${version}"
}

task helmDeploy(type: Exec){
    commandLine  "./helm", "--kubeconfig=kubeconfig.yaml", "upgrade", "spring-boot-app","./chart","--set", "image.repository=${docker_registry}", "--set", "image.tag=${version}", "--set", "timestamp=${getTimeNow()}"
}

dockerPush.dependsOn(dockerBuild)
copyJar.dependsOn(build)
dockerBuild.dependsOn(copyJar)

def getTimeNow(){
    LocalDateTime.now().toString()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            artifact("$buildDir/openapi.json") {
                classifier "openapi"
                extension "json"
            }
        }
    }
    repositories {
  	maven {
            url "s3://${repoBucketName}/releases"
	    credentials(AwsCredentials) {
                accessKey awsCredentials.AWSAccessKeyId
	        secretKey awsCredentials.AWSSecretKey
       	    }
    	}
    }
}

jar {
    enabled = true
}

bootJar {
    classifier = 'application'
}
